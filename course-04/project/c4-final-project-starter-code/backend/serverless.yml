org: cmmcgrew
app: serverless-todo-app
service: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: 'us-east-1'

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-c4-todo-images-154524364323-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    # TODO - Store Secret in AWS environment (https://www.youtube.com/watch?v=_UkKkrBArU4)
    # DISABLE_XRAY_TRACING: 1
    # AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
    # _X_AMZN_TRACE_ID: 0
    # AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    # AUTH_0_SECRET_FIELD: auth0Secret


  logs:
    # Enable API Gateway logs
    restApi: true

  # iam:
  #   role:
  #     statements:
  #       - Effect: Allow
  #         Action:
  #           - xray:PutTelemetryRecords
  #           - xray:PutTraceSegments
  #         Resource: "*"
  #       - Effect: Allow
  #         Action:
  #           - s3:PutObject
  #           - xray:GetObject
  #         Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
  #       - Effect: Allow
  #         Action:
  #           - secretsmanager:GetSecretValue
  #         Resource: !Ref Auth0Secret
  #       - Effect: Allow
  #         Action:
  #           - kms:Decrypt
  #         Resource: !GetAtt KMSKey.Arn


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function - 
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    tracing: true
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    # iamRoleStatementsName: my-custom-role-name #optional custom role name setting instead of the default generated one
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan  
        Resource: "arn:aws:dynamodb:us-east-1:154524364323:table/Todos-${self:provider.stage}"

  # TODO: Configure this function - 
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    tracing: true
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-todo-model.json)}
    # iamRoleStatementsName: my-custom-role-name #optional custom role name setting instead of the default generated one
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:PutItem        
        Resource: "arn:aws:dynamodb:us-east-1:154524364323:table/Todos-dev"
  # TODO: Configure this function
  # Provide property for setting up CORS(done), Authorizer(done), iamRoleStatements(done), and request schemas (done)
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    tracing: true
    events:
      - http:
          method: put
          cors: true
          path: todos/{todoId}
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/update-todo-model.json)}
    # iamRoleStatementsName: my-custom-role-name #optional custom role name setting instead of the default generated one
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:UpdateItem        
        Resource: "arn:aws:dynamodb:us-east-1:154524364323:table/Todos-dev"
  # TODO: Configure this function
  # Provide property for setting up CORS (done), Authorizer (done), iamRoleStatements (done)
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    tracing: true
    events:
      - http:
          method: delete
          cors: true
          path: todos/{todoId}
          authorizer: Auth
  # iamRoleStatementsName: my-custom-role-name #optional custom role name setting instead of the default generated one
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:DeleteItem        
        Resource: "arn:aws:dynamodb:us-east-1:154524364323:table/Todos-dev"

  # TODO: Configure this function
  # Provide property for setting up CORS (done), Authorizer (done), iamRoleStatements??? <-- need to figure this one out
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    tracing: true
    events:
      - http:
          method: post
          cors: true
          path: todos/{todoId}/attachment
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

resources:
  Resources:
    # Add necessary AWS resources. You will need at least the following AWS resources
    # TODO: Fill the properties
    # Feel free to change the names as you like. 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
   
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    
    # TODO: Create a DynamoDB table with local secondary index and a composite key
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          # - AttributeName: createdAt
          #   AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              # - AttributeName: createdAt
              #   KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    # TODO: Complete the bucket properties below. 
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: TodoPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - 's3:GetObject'
                - 's3:PutObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
    
    # KMSKey:
    #   Type: AWS::KMS::Key
    #   Properties:
    #     Description: KMS key to encrypt Auth0 secret
    #     KeyPolicy:
    #       Version: '2012-10-17'
    #       Id: key-default-1
    #       Statement:
    #         - Sid: Allow administration of the key
    #           Effect: Allow
    #           Principal:
    #             AWS:
    #               Fn::Join:
    #               - ':'
    #               - - 'arn:aws:iam:'
    #                 - Ref: AWS::AccountId
    #                 - 'root'
    #           Action:
    #             - 'kms:*'
    #           Resource: '*'
    # KMSKeyAlias:
    #   Type: AWS::KMS::Alias
    #   Properties:
    #     AliasName: alias/Auth0Secret-${self:provider.stage}
    #     TargetKeyId: !Ref KMSKey

    # Auth0Secret:
    #   Type: AWS::SecretsManager::Secret
    #   Properties:
    #     Name: ${self:provider.environment.AUTH_0_SECRET_ID}
    #     Description: Auth-secret
    #     KmsKeyId: !Ref KMSKey
custom:
  topicName: attachmentTopic-${self:provider.stage}

  serverless-offline:
    port: 3003

  dynamodb:
    stages: 
      - dev
      - test
      - stage
    start:
      port: 8000
      inMemory: true
      migrate: true

      